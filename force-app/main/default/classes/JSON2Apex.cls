//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//
// The supplied json has fields with names that are not valid in apex
// and so can only be parsed with explicitly generated code, this option
// was auto selected for you.

public class JSON2Apex {

	public String account_sid {get;set;} 
	public String api_version {get;set;} 
	public String body {get;set;} 
	public String date_created {get;set;} 
	public String date_sent {get;set;} 
	public String date_updated {get;set;} 
	public String direction {get;set;} 
	public Object error_code {get;set;} 
	public Object error_message {get;set;} 
	public String from_Z {get;set;} // in json: from
	public String messaging_service_sid {get;set;} 
	public String num_media {get;set;} 
	public String num_segments {get;set;} 
	public Object price {get;set;} 
	public Object price_unit {get;set;} 
	public String sid {get;set;} 
	public String status {get;set;} 
	public Subresource_uris subresource_uris {get;set;} 
	public String to {get;set;} 
	public String uri {get;set;} 

	public JSON2Apex(JSONParser parser) {
		while (parser.nextToken() != System.JSONToken.END_OBJECT) {
			if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
				String text = parser.getText();
				if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
					if (text == 'account_sid') {
						account_sid = parser.getText();
					} else if (text == 'api_version') {
						api_version = parser.getText();
					} else if (text == 'body') {
						body = parser.getText();
					} else if (text == 'date_created') {
						date_created = parser.getText();
					} else if (text == 'date_sent') {
						date_sent = parser.getText();
					} else if (text == 'date_updated') {
						date_updated = parser.getText();
					} else if (text == 'direction') {
						direction = parser.getText();
					} else if (text == 'error_code') {
						error_code = parser.readValueAs(Object.class);
					} else if (text == 'error_message') {
						error_message = parser.readValueAs(Object.class);
					} else if (text == 'from') {
						from_Z = parser.getText();
					} else if (text == 'messaging_service_sid') {
						messaging_service_sid = parser.getText();
					} else if (text == 'num_media') {
						num_media = parser.getText();
					} else if (text == 'num_segments') {
						num_segments = parser.getText();
					} else if (text == 'price') {
						price = parser.readValueAs(Object.class);
					} else if (text == 'price_unit') {
						price_unit = parser.readValueAs(Object.class);
					} else if (text == 'sid') {
						sid = parser.getText();
					} else if (text == 'status') {
						status = parser.getText();
					} else if (text == 'subresource_uris') {
						subresource_uris = new Subresource_uris(parser);
					} else if (text == 'to') {
						to = parser.getText();
					} else if (text == 'uri') {
						uri = parser.getText();
					} else {
						System.debug(LoggingLevel.WARN, 'JSON2Apex consuming unrecognized property: '+text);
						consumeObject(parser);
					}
				}
			}
		}
	}
	
	public class Subresource_uris {
		public String media {get;set;} 

		public Subresource_uris(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'media') {
							media = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Subresource_uris consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	
	public static JSON2Apex parse(String json) {
		System.JSONParser parser = System.JSON.createParser(json);
		return new JSON2Apex(parser);
	}
	
	public static void consumeObject(System.JSONParser parser) {
		Integer depth = 0;
		do {
			System.JSONToken curr = parser.getCurrentToken();
			if (curr == System.JSONToken.START_OBJECT || 
				curr == System.JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == System.JSONToken.END_OBJECT ||
				curr == System.JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
	}
	




}